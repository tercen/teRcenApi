% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table_schema_service.R
\name{TableSchemaService}
\alias{TableSchemaService}
\title{TableSchemaService}
\format{
\code{\link{R6Class}} object.
}
\description{
TableSchemaService

TableSchemaService
}
\section{Methods}{

\describe{
   \item{\code{select(tableId,cnames,offset,limit)}}{method}
   \item{\code{selectPairwise(tableId,cnames,offset,limit)}}{method}
   \item{\code{selectStream(tableId,cnames,offset,limit)}}{method}
   \item{\code{selectCSV(tableId,cnames,offset,limit,separator,quote,encoding)}}{method}
}
}

\section{Super class}{
\code{\link[tercenApi:HttpClientService]{tercenApi::HttpClientService}} -> \code{TableSchemaService}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TableSchemaService$new()}}
\item \href{#method-findByQueryHash}{\code{TableSchemaService$findByQueryHash()}}
\item \href{#method-findSchemaByDataDirectory}{\code{TableSchemaService$findSchemaByDataDirectory()}}
\item \href{#method-select}{\code{TableSchemaService$select()}}
\item \href{#method-selectPairwise}{\code{TableSchemaService$selectPairwise()}}
\item \href{#method-selectStream}{\code{TableSchemaService$selectStream()}}
\item \href{#method-selectCSV}{\code{TableSchemaService$selectCSV()}}
\item \href{#method-clone}{\code{TableSchemaService$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="create">}\href{../../tercenApi/html/HttpClientService.html#method-create}{\code{tercenApi::HttpClientService$create()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="delete">}\href{../../tercenApi/html/HttpClientService.html#method-delete}{\code{tercenApi::HttpClientService$delete()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="findKeys">}\href{../../tercenApi/html/HttpClientService.html#method-findKeys}{\code{tercenApi::HttpClientService$findKeys()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="findStartKeys">}\href{../../tercenApi/html/HttpClientService.html#method-findStartKeys}{\code{tercenApi::HttpClientService$findStartKeys()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="fromTson">}\href{../../tercenApi/html/HttpClientService.html#method-fromTson}{\code{tercenApi::HttpClientService$fromTson()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="get">}\href{../../tercenApi/html/HttpClientService.html#method-get}{\code{tercenApi::HttpClientService$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="getServiceUri">}\href{../../tercenApi/html/HttpClientService.html#method-getServiceUri}{\code{tercenApi::HttpClientService$getServiceUri()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="list">}\href{../../tercenApi/html/HttpClientService.html#method-list}{\code{tercenApi::HttpClientService$list()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="onResponseError">}\href{../../tercenApi/html/HttpClientService.html#method-onResponseError}{\code{tercenApi::HttpClientService$onResponseError()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="toTson">}\href{../../tercenApi/html/HttpClientService.html#method-toTson}{\code{tercenApi::HttpClientService$toTson()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="tercenApi" data-topic="HttpClientService" data-id="update">}\href{../../tercenApi/html/HttpClientService.html#method-update}{\code{tercenApi::HttpClientService$update()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$new(baseRestUri, client)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findByQueryHash"></a>}}
\if{latex}{\out{\hypertarget{method-findByQueryHash}{}}}
\subsection{Method \code{findByQueryHash()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$findByQueryHash(keys = NULL, useFactory = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findSchemaByDataDirectory"></a>}}
\if{latex}{\out{\hypertarget{method-findSchemaByDataDirectory}{}}}
\subsection{Method \code{findSchemaByDataDirectory()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$findSchemaByDataDirectory(
  startKey = NULL,
  endKey = NULL,
  limit = 20,
  skip = 0,
  descending = TRUE,
  useFactory = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-select"></a>}}
\if{latex}{\out{\hypertarget{method-select}{}}}
\subsection{Method \code{select()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$select(tableId, cnames, offset, limit)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-selectPairwise"></a>}}
\if{latex}{\out{\hypertarget{method-selectPairwise}{}}}
\subsection{Method \code{selectPairwise()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$selectPairwise(tableId, cnames, offset, limit)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-selectStream"></a>}}
\if{latex}{\out{\hypertarget{method-selectStream}{}}}
\subsection{Method \code{selectStream()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$selectStream(tableId, cnames, offset, limit)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-selectCSV"></a>}}
\if{latex}{\out{\hypertarget{method-selectCSV}{}}}
\subsection{Method \code{selectCSV()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$selectCSV(
  tableId,
  cnames,
  offset,
  limit,
  separator,
  quote,
  encoding
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableSchemaService$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
